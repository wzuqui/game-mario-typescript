{"version":3,"sources":["src/createImage.ts","src/GameKeys.ts","src/GenericObject.ts","src/Platform.ts","src/Player.ts","src/Game.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.427135dc.js","sourceRoot":"..","sourcesContent":["export function createImage(imageSource: string) {\n  const image = new Image();\n  image.src = imageSource;\n  return image;\n}\n","export class GameKeys {\n  left: { pressed: boolean };\n  right: { pressed: boolean };\n  up: { pressed: boolean };\n  constructor() {\n    this.left = { pressed: false };\n    this.right = { pressed: false };\n    this.up = { pressed: false };\n  }\n}\n","export class GenericObject {\n  width: number;\n  height: number;\n  position: { x: number; y: number };\n  image: HTMLImageElement;\n\n  constructor(\n    private context: CanvasRenderingContext2D,\n    { x, y, image }: { x: number; y: number; image: HTMLImageElement }\n  ) {\n    this.position = { x, y };\n    this.image = image;\n    this.width = image.width;\n    this.height = image.height;\n  }\n\n  draw() {\n    this.context.drawImage(this.image, this.position.x, this.position.y);\n  }\n}\n","export class Platform {\n  width: number;\n  height: number;\n  position: { x: number; y: number };\n  image: HTMLImageElement;\n\n  constructor(\n    private context: CanvasRenderingContext2D,\n    { x, y, image }: { x: number; y: number; image: HTMLImageElement }\n  ) {\n    this.position = { x, y };\n    this.image = image;\n    this.width = image.width;\n    this.height = image.height;\n  }\n\n  draw() {\n    this.context.drawImage(this.image, this.position.x, this.position.y);\n  }\n}\n","import { createImage } from './createImage';\nimport { GameKeys } from './GameKeys';\nimport spriteRunLeftImageSource from './img/spriteRunLeft.png';\nimport spriteRunRightImageSource from './img/spriteRunRight.png';\nimport spriteStandLeftImageSource from './img/spriteStandLeft.png';\nimport spriteStandRightImageSource from './img/spriteStandRight.png';\n\nexport class Player {\n  public readonly speed: number;\n  public readonly position: { x: number; y: number };\n  public readonly velocity: { x: number; y: number };\n\n  public get width() {\n    return this._width;\n  }\n  public get height() {\n    return this._height;\n  }\n\n  private readonly jumpHeight: number;\n  private _height: number;\n  private _width: number;\n  private frames: number;\n  private sprites: {\n    stand: {\n      right: HTMLImageElement;\n      left: HTMLImageElement;\n      cropWidth: number;\n      width: number;\n    };\n    run: {\n      right: HTMLImageElement;\n      left: HTMLImageElement;\n      cropWidth: number;\n      width: number;\n    };\n  };\n  currentSprinte: HTMLImageElement;\n  currentCropWidth: number;\n\n  constructor(\n    private canvas: HTMLCanvasElement,\n    private context: CanvasRenderingContext2D,\n    private gravity: number\n  ) {\n    this.speed = 10;\n    this.jumpHeight = -25;\n    this.position = {\n      x: 100,\n      y: 100,\n    };\n    this.velocity = {\n      x: 0,\n      y: 20,\n    };\n\n    this._width = 66;\n    this._height = 150;\n\n    this.frames = 0;\n    this.sprites = {\n      stand: {\n        right: createImage(spriteStandRightImageSource),\n        left: createImage(spriteStandLeftImageSource),\n        cropWidth: 177,\n        width: 66,\n      },\n      run: {\n        right: createImage(spriteRunRightImageSource),\n        left: createImage(spriteRunLeftImageSource),\n        cropWidth: 341,\n        width: 127.875,\n      },\n    };\n    this.currentSprinte = this.sprites.stand.right;\n    this.currentCropWidth = this.sprites.stand.cropWidth;\n  }\n\n  draw() {\n    this.context.drawImage(\n      this.currentSprinte,\n      this.currentCropWidth * this.frames,\n      0,\n      this.currentCropWidth,\n      400,\n      this.position.x,\n      this.position.y,\n      this._width,\n      this.height\n    );\n  }\n\n  update() {\n    this.frames++;\n    if (\n      this.frames > 59 &&\n      (this.currentSprinte === this.sprites.stand.right ||\n        this.currentSprinte === this.sprites.stand.left)\n    ) {\n      this.frames = 0;\n    } else if (\n      this.frames > 29 &&\n      (this.currentSprinte === this.sprites.run.right ||\n        this.currentSprinte === this.sprites.run.left)\n    ) {\n      this.frames = 0;\n    }\n    this.draw();\n    this.position.y += this.velocity.y;\n    this.position.x += this.velocity.x;\n\n    if (this.position.y + this.height + this.velocity.y <= this.canvas.height) {\n      this.velocity.y += this.gravity;\n    }\n  }\n\n  jump() {\n    this.velocity.y = this.jumpHeight;\n  }\n\n  spriteSwitching(keys: GameKeys, lastKey?: 'right' | 'left') {\n    if (\n      keys.right.pressed &&\n      lastKey === 'right' &&\n      this.currentSprinte !== this.sprites.run.right\n    ) {\n      this.frames = 1;\n      this.currentSprinte = this.sprites.run.right;\n      this.currentCropWidth = this.sprites.run.cropWidth;\n      this._width = this.sprites.run.width;\n    } else if (\n      keys.left.pressed &&\n      lastKey === 'left' &&\n      this.currentSprinte !== this.sprites.run.left\n    ) {\n      this.frames = 1;\n      this.currentSprinte = this.sprites.run.left;\n      this.currentCropWidth = this.sprites.run.cropWidth;\n      this._width = this.sprites.run.width;\n    } else if (\n      !keys.right.pressed &&\n      lastKey === 'right' &&\n      this.currentSprinte !== this.sprites.stand.right\n    ) {\n      this.frames = 1;\n      this.currentSprinte = this.sprites.stand.right;\n      this.currentCropWidth = this.sprites.stand.cropWidth;\n      this._width = this.sprites.stand.width;\n    } else if (\n      !keys.left.pressed &&\n      lastKey === 'left' &&\n      this.currentSprinte !== this.sprites.stand.left\n    ) {\n      this.frames = 1;\n      this.currentSprinte = this.sprites.stand.left;\n      this.currentCropWidth = this.sprites.stand.cropWidth;\n      this._width = this.sprites.stand.width;\n    }\n  }\n}\n","import { createImage } from './createImage';\nimport { GameKeys } from './GameKeys';\nimport { GenericObject } from './GenericObject';\nimport backgroundImageSource from './img/background.png';\nimport hillsImageSource from './img/hills.png';\nimport platformImageSource from './img/platform.png';\nimport platformSmallTallImageSource from './img/platformSmallTall.png';\nimport { Platform } from './Platform';\nimport { Player } from './Player';\n\nexport class Game {\n  scrollOffset!: number;\n  platformImage!: HTMLImageElement;\n  player!: Player;\n  platforms!: Platform[];\n  genericObjects!: GenericObject[];\n  keys!: GameKeys;\n  canvas: HTMLCanvasElement;\n  context: CanvasRenderingContext2D;\n  gravity: number;\n  backgroundImage: HTMLImageElement;\n  hillsImage: HTMLImageElement;\n  platformSmallTallImage: HTMLImageElement;\n  floorPlatformYPosition: number;\n  lastKey?: 'right' | 'left';\n  playerIsOnTheFloor!: boolean;\n\n  constructor() {\n    this.canvas = document.querySelector('canvas') as HTMLCanvasElement;\n    this.context = this.canvas.getContext('2d') as CanvasRenderingContext2D;\n    this.canvas.width = 1024;\n    this.canvas.height = 576;\n    this.gravity = 1.5;\n\n    this.platformImage = createImage(platformImageSource);\n    this.backgroundImage = createImage(backgroundImageSource);\n    this.hillsImage = createImage(hillsImageSource);\n    this.platformSmallTallImage = createImage(platformSmallTallImageSource);\n    this.floorPlatformYPosition = 470;\n\n    this.init();\n    this.animate();\n    this.subscribeKeys();\n  }\n\n  init() {\n    this.scrollOffset = 0;\n    this.playerIsOnTheFloor = false;\n    this.keys = new GameKeys();\n\n    this.createBackground();\n    this.createPlatforms();\n\n    this.player = new Player(this.canvas, this.context, this.gravity);\n  }\n\n  private createBackground() {\n    this.genericObjects = [\n      new GenericObject(this.context, {\n        x: -1,\n        y: -1,\n        image: this.backgroundImage,\n      }),\n      new GenericObject(this.context, {\n        x: -1,\n        y: -1,\n        image: this.hillsImage,\n      }),\n    ];\n  }\n\n  private createPlatforms() {\n    this.platforms = [\n      ...newPlatform(this, 1, 400, 250, this.platformSmallTallImage),\n      ...newPlatform(this, 2),\n      ...newPlatform(\n        this,\n        1,\n        2 * this.platformImage.width + 350,\n        250,\n        this.platformSmallTallImage\n      ),\n      ...newPlatform(this, 1, 2 * this.platformImage.width + 300),\n    ];\n  }\n\n  animate() {\n    requestAnimationFrame(() => this.animate());\n    this.context.fillStyle = 'white';\n    this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    this.genericObjects.forEach(genericObject => genericObject.draw());\n    this.platforms.forEach(platform => platform.draw());\n    this.player.update();\n\n    const player_max_position_x = 400;\n    const player_min_position_x = 100;\n    const parallax_multiplier = 0.66;\n\n    if (\n      this.keys.right.pressed &&\n      this.player.position.x < player_max_position_x\n    ) {\n      this.player.velocity.x = this.player.speed;\n    } else if (\n      (this.keys.left.pressed &&\n        this.player.position.x > player_min_position_x) ||\n      (this.keys.left.pressed &&\n        this.scrollOffset === 0 &&\n        this.player.position.x > 0)\n    ) {\n      this.player.velocity.x = -this.player.speed;\n    } else {\n      this.player.velocity.x = 0;\n\n      if (this.keys.right.pressed) {\n        this.scrollOffset += this.player.speed;\n        this.platforms.forEach(platform => {\n          platform.position.x -= this.player.speed;\n        });\n        this.genericObjects.forEach(genericObject => {\n          genericObject.position.x -= this.player.speed * parallax_multiplier;\n        });\n      } else if (this.keys.left.pressed && this.scrollOffset > 0) {\n        this.scrollOffset -= this.player.speed;\n        this.platforms.forEach(platform => {\n          platform.position.x += this.player.speed;\n        });\n        this.genericObjects.forEach(genericObject => {\n          genericObject.position.x += this.player.speed * parallax_multiplier;\n        });\n      }\n    }\n\n    // platformCollisionDetect\n    this.platforms.forEach(platform => {\n      if (\n        this.player.position.y + this.player.height <= platform.position.y &&\n        this.player.position.y + this.player.height + this.player.velocity.y >=\n          platform.position.y &&\n        this.player.position.x + this.player.width >= platform.position.x &&\n        this.player.position.x <= platform.position.x + platform.width\n      ) {\n        this.player.velocity.y = 0;\n        this.playerIsOnTheFloor = true;\n      }\n    });\n\n    // spriteSwitching\n    this.player.spriteSwitching(this.keys, this.lastKey);\n\n    // win condition\n    const scrollOffsetPositionWin = this.platformImage.width * 5 + 300 - 2;\n    if (this.scrollOffset > scrollOffsetPositionWin) {\n    }\n\n    // lose condition\n    if (this.player.position.y > this.canvas.height) {\n      this.init();\n    }\n  }\n\n  subscribeKeys() {\n    window.addEventListener('keydown', ({ key }) => {\n      switch (key) {\n        case 'ArrowLeft':\n          this.keys.left.pressed = true;\n          this.lastKey = 'left';\n          break;\n\n        case 'ArrowDown':\n          break;\n\n        case 'ArrowRight':\n          this.keys.right.pressed = true;\n          this.lastKey = 'right';\n          break;\n\n        case 'ArrowUp':\n          if (!this.keys.up.pressed && this.playerIsOnTheFloor) {\n            this.playerIsOnTheFloor = false;\n            this.player.jump();\n          }\n          this.keys.up.pressed = true;\n          break;\n      }\n    });\n\n    window.addEventListener('keyup', ({ key }) => {\n      switch (key) {\n        case 'ArrowLeft':\n          this.keys.left.pressed = false;\n          break;\n\n        case 'ArrowDown':\n          break;\n\n        case 'ArrowRight':\n          this.keys.right.pressed = false;\n          break;\n\n        case 'ArrowUp':\n          this.keys.up.pressed = false;\n          break;\n      }\n    });\n  }\n}\n\nfunction newPlatform(\n  that: Game,\n  size: number,\n  x?: number,\n  y?: number,\n  image?: HTMLImageElement\n): Platform[] {\n  x ??= -1;\n  y ??= that.floorPlatformYPosition;\n  image ??= that.platformImage;\n\n  const result: Platform[] = [];\n\n  for (let index = 0; index < size; index++) {\n    result.push(\n      new Platform(that.context, {\n        x: x + index * (image.width - 2),\n        y,\n        image,\n      })\n    );\n  }\n\n  return result;\n}\n","import './style.css';\nimport { Game } from './Game';\n\nconst game = new Game();\n"]}